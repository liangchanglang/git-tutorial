q1.安装git：
  Ubuntu下只需执行命令：sudo apt-get install git

2. 创建版本库：
  mkdir testgit
  cd testgit
  git init
  git init命令把当前目录变成一个Git可以管理的仓库，当执行这条命令以后，使用ls -a会发现多了一个.git目录，这个目录就是Git用于跟踪管理版本库的，不可随意修改
  否则Git仓库很有可能被破坏
  
3. 把文件添加到版本库：
  #cat readme.txt
	Git is a distributed version control system.
	Git is free.
	Git is free software.
 #git add readme.txt(告诉git将readme.txt添加到缓冲)
 #git commit -m "delete author information" (告诉git将文件提交到仓库，-m后面的是本次提交的说明)
	On branch master
	Changes not staged for commit:
			modified:   readme.txt

	no changes added to commit

4. 版本回退：
 可以使用git log查看当前有多少次提交，该命令按照最近一次提交到最远一次提交的顺序列出提交的历史：
 #git log
	commit 358478144464525177653ba9afaa775f4286775c
	Author: liangchanglang <liangchanglang@casachina.com.cn>
	Date:   Wed Jan 24 11:48:43 2018 +0800

		delete author information

	commit deea5d01ee5af394f74c5ba3b0874983939f3216
	Author: liangchanglang <liangchanglang@casachina.com.cn>
	Date:   Wed Jan 24 11:20:22 2018 +0800

		append GPL

	commit b48b9254067f903f478e8f195132a9eac2145940
	Author: liangchanglang <liangchanglang@casachina.com.cn>
	Date:   Wed Jan 24 11:18:12 2018 +0800

		modified readme.txt, add the information of autor

	commit e098ab9edf268d8c928e1c640bfaafcd1d3b8647
	Author: liangchanglang <liangchanglang@casachina.com.cn>
	Date:   Wed Jan 24 10:59:51 2018 +0800

		 wrote a read file by lcl
		 
 上面的命令列出了详细的提交历史，还可以这样：
 #git log --pretty=oneline
	358478144464525177653ba9afaa775f4286775c delete author information
	deea5d01ee5af394f74c5ba3b0874983939f3216 append GPL
	b48b9254067f903f478e8f195132a9eac2145940 modified readme.txt, add the information of autor
	e098ab9edf268d8c928e1c640bfaafcd1d3b8647  wrote a read file by lcl
 上面列出的第一列是commit_id，可以使用如下命令进行版本的回退：
 #git reset --hard HEAD^(回退到上一次提交的版本)
 #git reset --hard commit_id(回退到commit_id的版本)
 #git reset --hard HEAD~n(回退到最新版本往前数的第n次提交的版本)
 
 HEAD是一个指向当前最新提交的版本的指针，当使用reset进行版本回退后，HEAD就指向了相对应的版本。
 回退到上一次版本后，使用git log将会发现最新版本的信息看不到了，假如此时想要重新回到最新提交的版本，
 可以使用git reflog，这条命令记录了每次使用的命令，类似于Linux的history命令，可以看到相应的commit_id，
 使用上述reset命令的第二个版本就可以回到相应的版本了。

5. git diff命令：
 首先简要说明下暂存区和工作区：工作区就是我们创建的目录了，比如我们第2步中创建的testgit。暂存区是版本库中的一个叫做
 index或者stage东西，git add命令实际上就是把我们的修改添加到暂存区，git commit才真正的提交到仓库中。
 #git diff (比较工作区和暂存区的差别)
 #git diff --cached(比较暂存区和仓库中分支的区别)
 #git diff HEAD -- filename(比较工作区中名字为filename的文件和已提交到仓库中的同名文件的区别)
 
6. 撤销修改：
 撤销修改有两种情况：
 1).修改工作区的文件后没有git add到暂存区中，则git checkout -- filename将回到和版本库一样的状态。
 2).修改工作区的文件后已经git add到暂存区中，然后又作了修改，则git checkout -- filename将回到添加到暂存区后的状态。
 总之，就是让文件回到最近一次git commit或git add的状态。
 另外，git reset HEAD filename可以将暂存区的修改重新放回工作区，然后可以使用上面的git checkout -- filename撤销工作区修改。
  小结：

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	
7.删除文件：
	当使用rm命令删除了某个文件以后，这里有两种情况：
	1).误删了，因为版本库里还有，这时可以使用git checkout -- filename，把误删的文件恢复到最新版本。
	2).确实需要删除文件，包括版本库中的文件，可以使用git rm filename，然后git commit。

8. 远程仓库：	
	
9. 分支管理：
    1).分支的作用
	假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。
	如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在
	原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
	其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。
	但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。
	
	2).创建与合并分支
	在版本回退中可以看到，每次提交Git都会把它们串成一条时间线，这条时间线就是一个分支，在Git中，有个叫master的主分支，HEAD严格来说不是指向提交，而是指向master，
	master才是指向提交的，所以HEAD指向的是当前分支。
	创建分支并切换到新分支下：#git checkout -b dev (创建一个名为dev的分支并切换到该分支下)
	创建分支，然后再切换：#git branch dev, #git checkout dev.
	查看当前分支：#git branch
	合并分支：#git merge dev(将分支dev合并到当前分支)
	删除分支：#git branch -d dev(删除dev分支)
	
10. 多人协作：
	多人协作的工作模式通常是这样：
		1).首先，可以试图用git push origin branch-name推送自己的修改；
		2).如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		3).如果合并有冲突，则解决冲突，并在本地提交；
		4).没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		5).如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
	小结
		.查看远程库信息，使用git remote -v；
		.本地新建的分支如果不推送到远程，对其他人就是不可见的；
		.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
		.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
		.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
		.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
 

--------------------------------------------------------------------------------------
1.git log查看提交历史：
 git log -p -n      			#查看最近n次的详细提交信息
 git log --stat     			#查看每次提交的简略信息
 git log --pretty=<option> 		#根据option的不同，显示不同的提交历史，option可以是oneline, short, full, fuller等。
 git log --pretty=format:"..."  #对format的说明：
 选项		说明
 %H      	提交对象（commit）的完整哈希字串
 %h      	提交对象的简短哈希字串
 %T			树对象（tree）的完整哈希字串
 %t			树对象的简短哈希字串
 %P			父对象（parent）的完整哈希字串
 %p			父对象的简短哈希字串
 %an		作者（author）的名字
 %ae		作者的电子邮件地址
 %ad		作者修订日期（可以用 --date= 选项定制格式）
 %ar		作者修订日期，按多久以前的方式显示
 %cn		提交者（committer）的名字
 %ce		提交者的电子邮件地址
 %cd		提交日期
 %cr		提交日期，按多久以前的方式显示
 %s			提交说明

---
 git log常用选项
 选项				说明
 -p						按补丁格式显示每个更新之间的差异。
 --stat					显示每次更新的文件修改统计信息。
 --shortstat			只显示 --stat 中最后的行数修改添加移除统计。
 --name-only			仅在提交信息后显示已修改的文件清单。
 --name-status			显示新增、修改、删除的文件清单。
 --abbrev-commit 		仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
 --relative-date		使用较短的相对时间显示（比如，“2 weeks ago”）。
 --graph				显示 ASCII 图形表示的分支合并历史。
 --pretty				使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）
 -S<string>				仅显示添加或移除了某个关键字的提交
 --since(after)=<time>	time可以有多种格式，如2weeks（两周内），yesterday（昨天以来的提交），2018-3-9,（2018年3月9号以来的提交）
 --until=(before)<time>	time的格式参考--since选项 
 
 
2.忽略文件：
 一般情况下，总有写文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，
 或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。
root@ltepcvm242:~/FIS_GIT/FIS# cat .gitignore 
*~				#忽略所有’~‘结尾的文件
*.swp			#忽略所有“.swp”结尾的文件
*.[oa]			#忽略所有“.o .a”结尾的文件

文件 .gitignore 的格式规范如下：
 .所有空行或者以 ＃ 开头的行都会被 Git 忽略。
 .可以使用标准的 glob 模式匹配。
 .匹配模式可以以（/）开头防止递归。
 .匹配模式可以以（/）结尾指定目录。
 .要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
  所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符
（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，
表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（*) 表示匹配任意中间目录，比如
`a/**/z` 可以匹配 a/z, a/b/z 或 `a/b/c/z`等。

3.移除文件：
 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，
 并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。如果只是简单地从工作目录中手工删除文件，运行 git status 
 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到，然后再运行 git rm 记录此次移除文件的操作下一次提交时，
 该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 
 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。
 
 另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，
 但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 
 为达到这一目的，使用 --cached 选项：git rm --cached README
 
4.撤销操作：
 当commit以后，发现漏了文件没有添加或者提交信息写错，可以使用git commit --amend尝试重新提交，这个命令会将暂存区的文件提交，如果上次提交以后未做修改，则
 该命令只修改提交信息。
 git reset HEAD <filename>       #取消暂存
 git checkout -- <filename>		 #撤销修改后没有放入暂存区的修改
 
5.查看远程仓库：
 git remote							#查看每个远程服务器的简写
 git remote -v 						#查看需要读写远程仓库使用的git保存的简写与其对应的 URL。
 git remote add <shortname> <url>	#添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写
 
6.从远程仓库中抓取与拉取：
 git fetch <remote-name>					#抓取远程仓库中的数据，执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。
 git push <remote-name> <local-branch-name>	#将本地分支中的数据推送到远程仓库
 git remote show <remote-name>				#查看远程仓库的信息
 git remote rename <old> <new>				#重命名远程仓库
 git remote rm <remote-name>				#删除远程仓库
 
7.git解决冲突：
 当进行git pull时,经常出现Your local changes to the following files would be overwritten by checkout 


















		 